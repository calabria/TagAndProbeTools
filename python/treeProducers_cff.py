import FWCore.ParameterSet.Config as cms

muToTau = cms.EDAnalyzer("TagProbeFitTreeProducer",
                        tagProbePairs = cms.InputTag("tnpAnyMuAnyTau"),
                        arbitration   = cms.string("OneProbe"),
                        #massForArbitration = cms.double(91),
                        variables = cms.PSet(
				pt = cms.string("pt"),
				ptJet = cms.string("pfJetRef.pt"),
				abseta = cms.string("abs(eta)"),
				phi = cms.string("phi"),
				DecayMode = cms.string("tauID('decayModeFinding')"),
				HpsLooseCombIsoDBCorr = cms.string("tauID('byLooseCombinedIsolationDeltaBetaCorr')"),
				HpsMediumIso = cms.string("tauID('byMediumCombinedIsolationDeltaBetaCorr')"),
				HpsTightIso = cms.string("tauID('byTightCombinedIsolationDeltaBetaCorr')"),
				HpsIsoMVARaw = cms.string("tauID('byIsolationMVAraw')"),
				HpsIsoMVALoose = cms.string("tauID('byLooseIsolationMVA')"),
				HpsIsoMVAMedium = cms.string("tauID('byMediumIsolationMVA')"),
				HpsIsoMVATight = cms.string("tauID('byTightIsolationMVA')"),
				HpsAntiMuLoose = cms.string("tauID('againstMuonLoose')"),
				HpsAntiMuMedium = cms.string("tauID('againstMuonMedium')"),
				HpsAntiMuTight = cms.string("tauID('againstMuonTight')"),
				HpsAntiMuLoose2 = cms.string("tauID('againstMuonLoose2')"),
				HpsAntiMuMedium2 = cms.string("tauID('againstMuonMedium2')"),
				HpsAntiMuTight2 = cms.string("tauID('againstMuonTight2')"),
    			),
                        flags = cms.PSet(
				passingIsoLooseMuonVetoLoose =  cms.InputTag("passingIsoLooseMuonVetoLoose"),
				passingIsoLooseMuonVetoMedium =  cms.InputTag("passingIsoLooseMuonVetoMedium"),
				passingIsoLooseMuonVetoTight =  cms.InputTag("passingIsoLooseMuonVetoTight"),
				passingIsoLooseMuonVetoLoose2 =  cms.InputTag("passingIsoLooseMuonVetoLoose2"),
				passingIsoLooseMuonVetoMedium2 =  cms.InputTag("passingIsoLooseMuonVetoMedium2"),
				passingIsoLooseMuonVetoTight2 =  cms.InputTag("passingIsoLooseMuonVetoTight2"),
    			),
			tagVariables = cms.PSet(
				Mt =  cms.InputTag("addUserVariables","Mt"),
    				puMCWeightRun2012 =  cms.InputTag("addUserVariables","puMCWeightRun2012"),
				triggerBitSingleMu = cms.InputTag("addUserVariables","triggerBitSingleMu"),
				muTriggerMatching = cms.InputTag("addUserVariables","muTriggerMatching"),
				muMVAMet = cms.InputTag("addUserVariables","mvaMET"),
				muTriggerBit = cms.InputTag("addUserVariables","triggerBitSingleMu"),
				muPFIsolation = cms.InputTag("userFloat('PFRelIsoDB04v2')"),
				mudxy = cms.InputTag("userFloat('dxyWrtPV')"),
				mudz = cms.InputTag("userFloat('dzWrtPV')"),
				muIsGlobal = cms.InputTag("isGlobalMuon"),
				muGlobalTrackIsNonnull = cms.InputTag("globalTrack.isNonnull"),
				muGlobalTrackChi2 = cms.InputTag("globalTrack.normalizedChi2"),
				muGlobalTrackNumberOfValidMuonHits = cms.InputTag("globalTrack.hitPattern.numberOfValidMuonHits"),
				muNumberOfMatchedStations = cms.InputTag("numberOfMatchedStations"),
				muInnerTrackNumberOfValidPixelHits = cms.InputTag("innerTrack.hitPattern.numberOfValidPixelHits"),
				muTrackerLayersWithMeasurement = cms.InputTag("track.hitPattern.trackerLayersWithMeasurement"),
				muIsPFMuon = cms.InputTag("userInt('isPFMuon')"),
			),
			tagFlags = cms.PSet(
   				IsoMu24_eta2p1   = cms.string("!triggerObjectMatchesByPath('HLT_IsoMu24_eta2p1_v*',1,0).empty()"),
			),
			pairVariables = cms.PSet(
				dr = cms.string("deltaR(daughter('muon').eta,daughter('muon').phi,daughter('tau').eta,daughter('tau').phi)"),
				charge = cms.string("charge")
			),
			pairFlags = cms.PSet(
			),
                        isMC = cms.bool( True ),
                        tagMatches = cms.InputTag("tagMcMatch") ,
                        probeMatches  = cms.InputTag("probeMcMatch"),
                        motherPdgId = cms.vint32(23),
                        makeMCUnbiasTree = cms.bool(True),
                        checkMotherInUnbiasEff = cms.bool(True),
                        allProbes = cms.InputTag("probeAnyTau"),
                        addRunLumiInfo = cms.bool(True),
			addEventVariablesInfo = cms.bool(True)
                        )
